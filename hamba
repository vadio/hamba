#!/bin/sh
set -e



# Reminder: we will use files in $HOME, hence the use of ~
# to anchor paths everywhere. HOME can be overridden when
# running this container.

# This is a workaround for systems that don't break the
# container command line into separate arguments.
# If the first argument passed to hamba contains a space,
# we will re-execute ourselves to fix the problem.
case "$1" in
*\ *)
    echo "First command-line argument contains a space."
    echo "Re-execing ourselves to work around the issue."
    exec $0 $*
    ;;
esac

# Wait until haproxy.new exists. When it does, move it to
# haproxy.cfg and start a new HAProxy instance to replace
# the existing one. If a PID file is found (indicating that
# another instance of HAProxy was already running), tell the
# new HAProxy to terminate the old ones gracefully.
# Repeat the whole thing forever.
main () {
   if [ $service_mode = dynamic ]
   then 
     echo "Starting main loop."
     while : ; do
          while ! [ -f ~/haproxy.new ]; do
              sleep 1
          done
          echo "Found haproxy.new."
          mv ~/haproxy.new ~/haproxy.chk
          echo "Configuration validation."
          if haproxy -f ~/haproxy.chk -c; then
              echo "Configuration validation PASSED."
              mv ~/haproxy.chk ~/haproxy.cfg
          else
              echo "Configuration validation FAILED."
              echo "Waiting for new configuration."
              continue
          fi
          echo "Starting new HAProxy instance."
          if [ -f ~/haproxy.pid ]; then
              echo "Found haproxy.pid."
              echo "The following PID(s) will be terminated:"
              cat ~/haproxy.pid
              PLEASESTOP="-sf $(cat ~/haproxy.pid)"
          else
              PLEASESTOP=
          fi
          haproxy -f ~/haproxy.cfg -p ~/haproxy.pid -D $PLEASESTOP
          echo "Started new HAProxy instance."
      done
    elif [ $service_mode = static ]
    then
	echo "Found haproxy.new."
        mv ~/haproxy.new ~/haproxy.chk
        echo "Configuration validation."
        if haproxy -f ~/haproxy.chk -c; then
            echo "Configuration validation PASSED."
            mv ~/haproxy.chk ~/haproxy.cfg
        else
            echo "Configuration validation FAILED."
            exit
        fi
        echo "Starting new HAProxy instance."
	      haproxy -f ~/haproxy.cfg -db -p ~/haproxy.pid
        wait `cat haproxy.pid`
    fi
}

# Output a valid HAProxy configuration.
config () {
    # If the first parameter contains a semi-colon,
    # assume that it's addr:port. Otherwise, assume
    # that it's just a port number and put * in front.
    case "$1" in
        *:*) BIND="$1" ;;
        *) BIND="*:$1" ;;
    esac
    
    maxconn=32
    maxconn_string="maxconn $maxconn"
    
    if [ $MAXCONN -eq 0 ]
    then
        maxconn_string=''
    elif [ $MAXCONN ]
    then
        maxconn_string="maxconn $MAXCONN"
    fi

    timeout_connect='5000ms'
    timeout_connect_string="timeout connect $timeout_connect"

    if [ $TIMOUT_CONNECT]
    then
        timeout_connnect_string="timeout connect $TIMEOUT_CONNECT"    
    fi

    timeout_client='50000ms'
    timeout_client_string="timeout client $timeout_client"

    if [ $TIMEOUT_CLIENT ]
    then
        timeout_client_string="timeout client $TIMEOUT_CLIENT"
    fi

    timeout_server='50000ms'
    timeout_server_string="timeout server $timeout_server"

    if [ $TIMEOUT_SERVER ]
    then
        timeout_server_string="timeout server $TIMEOUT_SERVER"
    fi

    stats_port=1936

    if [ $STATS_PORT ]
    then
        stats_port=$STATS_PORT
    fi

    service_mode=dynamic    
    if [ $SERVICE_MODE ]
    then
        service_mode=$SERVICE_MODE
    fi


    # Generate the global section of the config file.
    cat <<EOF
global
  daemon
  $maxconn_string
  
defaults
  mode tcp
  ${timeout_connect_string}
  ${timeout_client_string}
  ${timeout_server_string}

frontend hamba-in
  bind $BIND
  default_backend hamba-out

backend hamba-out
EOF

    # Now generate all the backend entries.
    shift
    while [ "$1" ]; do
        echo "  server $1-$2 $1:$2 check"
        shift
        shift
    done

    # If ADMIN is set, enable admin.
    if [ "$ADMIN" ]; then cat <<EOF
listen admin
  mode http
  bind $ADMIN
  stats enable
  stats uri /
EOF
    fi
}

# Hook to deal with signals correctly.
stop () {
    echo "Stopping main loop."
    # TODO nicely terminate HAProxy
    exit
}
trap stop TERM

case "$1" in
debugconfig)
    shift
    config "$@"
    ;;
reconfigure)
    shift
    config "$@" >~/haproxy.new
    ;;
run)
    shift
    if [ -n "$1" ]; then
        echo "Initial HAProxy configuration was provided."
        config "$@" >~/haproxy.new
    else
        echo "Initial HAProxy configuration was NOT provided."
        echo "HAProxy will not be started until one is created."
    fi
    main
    ;;
showconfig)
    cat ~/haproxy.cfg
    ;;
"")
    echo "Must specify at least one parameter:"
    echo "  hamba <debugconfig> <configuration...>"
    echo "  hamba <reconfigure> <configuration...>"
    echo "  hamba <run> [configuration...]"
    echo "  hamba <showconfig>"
    echo "  hamba <configuration...>"
    echo "Configuration is:"
    echo "  [frontendaddr:]<frontendport> [backendaddr backendport] [...]"
    ;;
*)
    # Fallback to old behavior where config is the sole argument.
    config "$@" >~/haproxy.new
    main
    ;;
esac

